knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(zoo)
library(ggplot2)
library(plotly)
mpoxData <- read.csv("Data/owid-monkeypox-data-5-16.csv")
allCountries <- mpoxData %>%
dplyr::select(location, date, new_cases) # Selecting the needed variables
#############
# Asia Data #
#############
asia <- allCountries %>%
dplyr::filter(location == "Asia") %>% # Filtering to included only Asia
dplyr::mutate(date = anytime::anydate(date)) # Changing date to date format
#################
# Non-Asia Data #
#################
nonAsia <- allCountries %>%
dplyr::filter(location %in% c("North America", "South America", "Oceania", "Europe", "Africa")) %>% # Filtering to include non-Asia
dplyr::group_by(date) %>% # Grouping by date
dplyr::mutate(cases = sum(new_cases),  # Calculating the number of cases at each date
location = "Non-Asia", # Relabeling locations
date = anytime::anydate(date)) %>% # Changing date to date format
dplyr::distinct(date, .keep_all = T) %>% # Keeping only one set of dates
dplyr::select(location, date, cases) %>% # Selecting needed variables
dplyr::rename("new_cases" = cases) # Renaming the cases column
######################
# Combining the data #
######################
allmpoxData <- rbind(asia, nonAsia)
###############################
# Saving the data as a '.csv' #
###############################
write.csv(allmpoxData, file = "Data/owid-mpox-cleaned-5-16.csv", row.names = F)
#########################
# 7-day rolling average #
#########################
rollingMean <- allmpoxData %>%
dplyr::group_by(location) %>% # Grouping by location
dplyr::mutate(casesRoll = zoo::rollmean(new_cases, 7, fill = NA, align = "right")) # Calculating the rolling mean
###############
# Weekly data #
###############
weekCases <- allmpoxData %>%
dplyr::group_by(location) %>%# Grouping by location
dplyr::mutate(Week = floor_date(ymd(date), unit = "week",week_start = getOption("lubridate.week.start", 7))) # Aggregated by week
################################
# All cases divided by 'month' #
################################
#monthAverage <-
###############################
# All cases divided by 'week' #
###############################
weekAverage <- weekCases %>%
dplyr::group_by(location, Week) %>%
dplyr::mutate(weekStandard = sum(new_cases)/7)
######################
# All Asia countries #
######################
countries_in_asia <- c(
"Afghanistan", "Armenia", "Azerbaijan", "Bahrain", "Bangladesh", "Bhutan",
"Brunei", "Cambodia", "China", "Cyprus", "Georgia", "India", "Indonesia",
"Iran", "Iraq", "Israel", "Japan", "Jordan", "Kazakhstan", "Kuwait",
"Kyrgyzstan", "Laos", "Lebanon", "Malaysia", "Maldives", "Mongolia",
"Myanmar", "Nepal", "North Korea", "Oman", "Pakistan", "Palestine",
"Philippines", "Qatar", "Russia", "Saudi Arabia", "Singapore",
"South Korea", "Sri Lanka", "Syria", "Taiwan", "Tajikistan", "Thailand",
"Timor-Leste", "Turkey", "Turkmenistan", "United Arab Emirates (UAE)",
"Uzbekistan", "Vietnam", "Yemen"
)
#################################################
# Filtering original data to look for countries #
#################################################
asiaCountries <- allCountries %>%
dplyr::filter(location %in% c(countries_in_asia)) %>%
dplyr::mutate(date = anytime::anydate(date))
#####################
# Plotting the data #
#####################
ggplotly(ggplot(data = asiaCountries, aes(x = date, y = new_cases, color = location)) +
geom_line() +
scale_x_date(breaks = seq.Date(unique(min(allmpoxData$date)), unique(max(allmpoxData$date)), by = "4 weeks")) +
labs(title = "",
y = "Cases",
x = "",
color = "") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
panel.grid = element_line(color = "grey97")))
#####################################
# Plotting case trends - line chart #
#####################################
ggplot(data = allmpoxData, aes(x = date, y = new_cases, color = location)) +
geom_line() +
facet_wrap(~location, ncol = 1, scales = "free_y") +
scale_x_date(breaks = seq.Date(unique(min(allmpoxData$date)), unique(max(allmpoxData$date)), by = "4 weeks")) +
labs(title = "",
y = "Cases",
x = "",
color = "") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
panel.grid = element_line(color = "grey97"))
####################################
# Plotting case trends - Overlayed #
####################################
ggplot(data = allmpoxData, aes(x = date, y = new_cases, color = location)) +
geom_line() +
scale_x_date(breaks = seq.Date(unique(min(allmpoxData$date)), unique(max(allmpoxData$date)), by = "4 weeks")) +
labs(title = "",
y = "Cases",
x = "",
color = "") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
panel.grid = element_line(color = "grey97"))
library(readxl)
percentiles_matrix <- read_excel("C:/Users/ablei/Downloads/percentiles_matrix.xlsx")
View(percentiles_matrix)
library(readxl)
actual <- read_excel("C:/Users/ablei/Downloads/actual_calibration.xlsx",
col_names = FALSE)
View(actual)
true_values <- c(actual[,1])
true_values <- c(as.data.frame(actual)[,1])
data.WIS <- as.data.frame(percentiles_matrix)
# Alphas related to quantiles
alphas <- c(0.02, 0.05, seq(0.1, 0.9, by = 0.1))
# Variable used below
w0 <- 1/2;
# Creating the sum vector for later use
sum1 <- 0;
# Variable used below
K <- length(alphas);
# Empty data frame
WISF <- data.frame(row.names = NULL)
for(j in 1:length(true_values)){
# Column to start with
colx <- 12;
# Resetting the sum
sum1 <- 0;
# Observed data during week one of calibration period
y <- true_values[j]
# Empty list for interval scores
IS <- list()
##########################
# Looping through alphas #
##########################
for(k in 1:K){
# Indexed alpha
alpha <- alphas[k]
# Alpha/2
w_k <- alpha/2
# Lower bound associated with indexed date and alpha
# Lt <- data.WIS[j,colx]
# Upper bound associated with indexed date and alpha
# Ut <- data.WIS[j,colx+11]
# Get lower and upper quantiles
lower_idx <- 1 + k
upper_idx <- 24 - k
##################################
# Calculating the Interval Score #
##################################
IS[k]= c((Ut-Lt)+(2/alpha)*(Lt-y)*(y<Lt)+(2/alpha)*(y-Ut)*(y>Ut))
# Used in WIS calculation
sum1 <- sum1+w_k*as.numeric(IS[k])
# Moving the column index
colx <- colx-1
} # End of loop going through the alphas
####################################################
# Mean prediction for the current indexed forecast #
####################################################
m <- data.WIS[j, 1]
###################
# Calculating WIS #
###################
WISF[j,1] <- (1/(K+1/2))*(w0*abs(y-m) + sum1)
} # End of loop through observed values
for(j in 1:length(true_values)){
# Column to start with
colx <- 12;
# Resetting the sum
sum1 <- 0;
# Observed data during week one of calibration period
y <- true_values[j]
# Empty list for interval scores
IS <- list()
##########################
# Looping through alphas #
##########################
for(k in 1:K){
# Indexed alpha
alpha <- alphas[k]
# Alpha/2
w_k <- alpha/2
# Lower bound associated with indexed date and alpha
Lt <- data.WIS[j,colx]
# Upper bound associated with indexed date and alpha
Ut <- data.WIS[j,colx+11]
# Get lower and upper quantiles
#lower_idx <- 1 + k
# upper_idx <- 24 - k
##################################
# Calculating the Interval Score #
##################################
IS[k]= c((Ut-Lt)+(2/alpha)*(Lt-y)*(y<Lt)+(2/alpha)*(y-Ut)*(y>Ut))
# Used in WIS calculation
sum1 <- sum1+w_k*as.numeric(IS[k])
# Moving the column index
colx <- colx-1
} # End of loop going through the alphas
####################################################
# Mean prediction for the current indexed forecast #
####################################################
m <- data.WIS[j, 1]
###################
# Calculating WIS #
###################
WISF[j,1] <- (1/(K+1/2))*(w0*abs(y-m) + sum1)
} # End of loop through observed values
# Get lower and upper quantiles
lower_idx <- 1 + k
# Alphas related to quantiles
alphas <- c(0.02, 0.05, seq(0.1, 0.9, by = 0.1))
# Variable used below
w0 <- 1/2;
# Creating the sum vector for later use
sum1 <- 0;
# Variable used below
K <- length(alphas);
# Empty data frame
WISF <- data.frame(row.names = NULL)
############################################
# Looping through calibration period dates #
############################################
for(j in 1:length(true_values)){
# Column to start with
colx <- 12;
# Resetting the sum
sum1 <- 0;
# Observed data during week one of calibration period
y <- true_values[j]
# Empty list for interval scores
IS <- list()
##########################
# Looping through alphas #
##########################
for(k in 1:K){
# Indexed alpha
alpha <- alphas[k]
# Alpha/2
w_k <- alpha/2
# Lower bound associated with indexed date and alpha
# Lt <- data.WIS[j,colx]
# Upper bound associated with indexed date and alpha
# Ut <- data.WIS[j,colx+11]
# Get lower and upper quantiles
lower_idx <- 1 + k
upper_idx <- 24 - k
Lt <- data_WIU[j, lower_idx]
Ut <- data_WIU[j, upper_idx]
##################################
# Calculating the Interval Score #
##################################
IS[k]= c((Ut-Lt)+(2/alpha)*(Lt-y)*(y<Lt)+(2/alpha)*(y-Ut)*(y>Ut))
# Used in WIS calculation
sum1 <- sum1+w_k*as.numeric(IS[k])
# Moving the column index
colx <- colx-1
} # End of loop going through the alphas
####################################################
# Mean prediction for the current indexed forecast #
####################################################
m <- data.WIS[j, 1]
###################
# Calculating WIS #
###################
WISF[j,1] <- (1/(K+1/2))*(w0*abs(y-m) + sum1)
} # End of loop through observed values
# Indexed quantile forecast
data.WIS <- indexedQuantile[c(1:calibration.input.MF), ]
# Alphas related to quantiles
alphas <- c(0.02, 0.05, seq(0.1, 0.9, by = 0.1))
# Variable used below
w0 <- 1/2;
# Creating the sum vector for later use
sum1 <- 0;
# Variable used below
K <- length(alphas);
# Empty data frame
WISF <- data.frame(row.names = NULL)
############################################
# Looping through calibration period dates #
############################################
for(j in 1:length(true_values)){
# Column to start with
colx <- 12;
# Resetting the sum
sum1 <- 0;
# Observed data during week one of calibration period
y <- true_values[j]
# Empty list for interval scores
IS <- list()
##########################
# Looping through alphas #
##########################
for(k in 1:K){
# Indexed alpha
alpha <- alphas[k]
# Alpha/2
w_k <- alpha/2
# Lower bound associated with indexed date and alpha
# Lt <- data.WIS[j,colx]
# Upper bound associated with indexed date and alpha
# Ut <- data.WIS[j,colx+11]
# Get lower and upper quantiles
lower_idx <- 1 + k
upper_idx <- 24 - k
Lt <- data.WIS[j, lower_idx]
Ut <- data.WIS[j, upper_idx]
##################################
# Calculating the Interval Score #
##################################
IS[k]= c((Ut-Lt)+(2/alpha)*(Lt-y)*(y<Lt)+(2/alpha)*(y-Ut)*(y>Ut))
# Used in WIS calculation
sum1 <- sum1+w_k*as.numeric(IS[k])
# Moving the column index
colx <- colx-1
} # End of loop going through the alphas
####################################################
# Mean prediction for the current indexed forecast #
####################################################
m <- data.WIS[j, 1]
###################
# Calculating WIS #
###################
WISF[j,1] <- (1/(K+1/2))*(w0*abs(y-m) + sum1)
} # End of loop through observed values
mean(WISF)
mean(as.data.frame(WISF[,1]))
mean(WISF[,1])
View(data.WIS)
k = 1
colx <- 12;
for(k in 1:K){
# Indexed alpha
alpha <- alphas[k]
# Alpha/2
w_k <- alpha/2
# Lower bound associated with indexed date and alpha
Lt <- data.WIS[j,colx]
# Upper bound associated with indexed date and alpha
Ut <- data.WIS[j,colx+11]
# Get lower and upper quantiles
lower_idx <- 1 + k
upper_idx <- 24 - k
Lt1 <- data.WIS[j, lower_idx]
Ut1 <- data.WIS[j, upper_idx]
##################################
# Calculating the Interval Score #
##################################
IS[k]= c((Ut-Lt)+(2/alpha)*(Lt-y)*(y<Lt)+(2/alpha)*(y-Ut)*(y>Ut))
# Used in WIS calculation
sum1 <- sum1+w_k*as.numeric(IS[k])
# Moving the column index
colx <- colx-1
} # End of loop going through the alphas
colx+11
# Column to start with
colx <- 12;
# Resetting the sum
sum1 <- 0;
# Observed data during week one of calibration period
y <- true_values[j]
# Empty list for interval scores
IS <- list()
##########################
# Looping through alphas #
##########################
for(k in 1:K){
# Indexed alpha
alpha <- alphas[k]
# Alpha/2
w_k <- alpha/2
# Lower bound associated with indexed date and alpha
Lt <- data.WIS[j,colx]
# Upper bound associated with indexed date and alpha
Ut <- data.WIS[j,colx+11]
# Get lower and upper quantiles
lower_idx <- 1 + k
upper_idx <- 24 - k
Lt1 <- data.WIS[j, lower_idx]
Ut1 <- data.WIS[j, upper_idx]
##################################
# Calculating the Interval Score #
##################################
IS[k]= c((Ut-Lt)+(2/alpha)*(Lt-y)*(y<Lt)+(2/alpha)*(y-Ut)*(y>Ut))
# Used in WIS calculation
sum1 <- sum1+w_k*as.numeric(IS[k])
# Moving the column index
colx <- colx-1
} # End of loop going through the alphas
(.55/1)
1-.55
0.45/2
.9/2
1 + k
